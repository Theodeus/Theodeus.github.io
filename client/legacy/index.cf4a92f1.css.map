{
  "version": 3,
  "file": "index.cf4a92f1.css",
  "sources": [
    "..\\..\\..\\..\\..\\..\\..\\src\\routes\\index.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  let canvas, offscreenCanvas, ctx, offscreenCtx, i, prevX, prevY;\n  let innerWidth;\n  let innerHeight;\n  let current;\n  let mounted = false;\n  let strokes;\n  let brushRadiusX;\n  let brushRadiusY;\n\n  let clientX;\n  let clientY;\n\n  let frames = 0;\n\n  let update = event => {\n    clientX = event.clientX;\n    clientY = event.clientY;\n    if (isNaN(clientX) || isNaN(clientY)) {\n      if (event.touches) {\n        if (\n          event.touches[0] &&\n          event.touches[0].clientX &&\n          event.touches[0].clientY\n        ) {\n          return requestAnimationFrame(\n            startTouch.bind(\n              null,\n              event.touches[0].clientX,\n              event.touches[0].clientY\n            )\n          );\n        }\n      } else {\n        return;\n      }\n    }\n    current.forEach(brush => {\n      for (i = 0; i < strokes; i++) {\n        offscreenCtx.lineWidth = Math.random() * 70 + 10;\n        offscreenCtx.beginPath();\n        brush.x = clientX + (Math.random() * 100 - 50);\n        brush.y = clientY + (Math.random() * 100 - 50);\n        offscreenCtx.fillStyle = `rgba(${~~(\n          (brush.x / innerWidth) *\n          255\n        )}, ${~~((brush.y / innerHeight) * 255)}, 150, 0.2)`;\n        offscreenCtx.ellipse(\n          brush.x,\n          brush.y,\n          brushRadiusX,\n          brushRadiusY,\n          (Math.random() * 6) / Math.PI,\n          0,\n          2 * Math.PI\n        );\n        offscreenCtx.fill();\n        offscreenCtx.closePath();\n      }\n    });\n    ctx.save();\n    ctx.filter = \"blur(250px)\";\n    ctx.drawImage(offscreenCanvas, 0, 0);\n    ctx.restore();\n    ctx.fillStyle = \"rgba(30, 30, 30, 0.3\";\n    ctx.fillRect(0, 0, innerWidth, innerHeight);\n  };\n\n  let startTouch = (x, y) => {\n    for (let i = 0; i < 25; i++) {\n      setTimeout(update({ clientX: x + i * 10, clientY: y + i * 10 }), i * 16);\n    }\n  };\n\n  onMount(() => {\n    mounted = true;\n  });\n\n  $: if (innerWidth && mounted) {\n    strokes = 10;\n    offscreenCanvas = document.createElement(\"canvas\");\n    canvas.width = innerWidth;\n    offscreenCanvas.width = innerWidth + 100;\n    canvas.height = innerHeight;\n    offscreenCanvas.height = innerHeight + 100;\n    brushRadiusX = innerWidth / 35;\n    brushRadiusY = innerHeight / 35;\n    current = [\n      {\n        x: innerWidth / 2,\n        y: innerHeight / 2\n      },\n      {\n        x: innerWidth / 2,\n        y: innerHeight / 2\n      },\n      {\n        x: innerWidth / 2,\n        y: innerHeight / 2\n      },\n      {\n        x: innerWidth / 2,\n        y: innerHeight / 2\n      },\n      {\n        x: innerWidth / 2,\n        y: innerHeight / 2\n      }\n    ];\n    ctx = canvas.getContext(\"2d\");\n    offscreenCtx = offscreenCanvas.getContext(\"2d\");\n  }\n</script>\n\n<style>\n  div {\n    display: flex;\n    flex-wrap: wrap;\n    text-align: center;\n    margin: 1em auto;\n  }\n  a {\n    font-size: 3em;\n    padding: 30px;\n  }\n  a::selection {\n    background: #990099;\n    color: #bb0099;\n  }\n  a:first-of-type:hover {\n    color: rgb(200, 255, 198);\n  }\n  a:nth-of-type(2):hover {\n    color: rgb(195, 253, 255);\n  }\n  a:nth-of-type(3):hover {\n    color: rgb(255, 197, 183);\n  }\n  a:hover {\n    color: rgb(255, 195, 247);\n  }\n  canvas {\n    position: fixed;\n    overflow: hidden;\n    top: 0;\n    left: 0;\n    z-index: -1;\n  }\n</style>\n\n<svelte:window bind:innerWidth bind:innerHeight />\n<svelte:body\n  on:mousemove={update}\n  on:touchstart={update}\n  on:touchmove={update} />\n\n<svelte:head>\n  <title>Oskar Eriksson | Interactive Developer & Technical Director</title>\n</svelte:head>\n\n<canvas bind:this={canvas} />\n\n<header>\n  <div>\n    <a\n      href=\"mailto:oskar@oskareriksson.se\"\n      target=\"_blank\">\n      Mail\n    </a>\n    <a\n      href=\"https://github.com/theodeus\"\n      target=\"_blank\">\n      Github\n    </a>\n    <a\n      href=\"https://twitter.com/_oskareriksson\"\n      target=\"_blank\">\n      Twitter\n    </a>\n    <a\n      href=\"https://www.linkedin.com/in/oskar-eriksson-00422446/\"\n      target=\"_blank\">\n      LinkedIn\n    </a>\n  </div>\n</header>\n"
  ],
  "names": [],
  "mappings": "AAsHE,GAAG,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AACD,CAAC,eAAC,CAAC,AACD,SAAS,CAAE,GAAG,CACd,OAAO,CAAE,IAAI,AACf,CAAC,AACD,gBAAC,WAAW,AAAC,CAAC,AACZ,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,gBAAC,cAAc,MAAM,AAAC,CAAC,AACrB,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AACD,gBAAC,aAAa,CAAC,CAAC,MAAM,AAAC,CAAC,AACtB,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AACD,gBAAC,aAAa,CAAC,CAAC,MAAM,AAAC,CAAC,AACtB,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AACD,gBAAC,MAAM,AAAC,CAAC,AACP,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC3B,CAAC,AACD,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,KAAK,CACf,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,EAAE,AACb,CAAC"
}